name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Manual trigger

env:
  COMPOSE_PROJECT_NAME: minis

jobs:
  test:
    runs-on: ubuntu-latest
    name: üß™ Test Build & Configuration
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate Docker Compose Configuration
        run: |
          docker compose config --quiet || exit 1
          echo "‚úÖ Docker Compose configuration is valid"

      - name: Test Docker Build
        run: |
          docker compose build --no-cache
          echo "‚úÖ Docker build completed successfully"

      - name: Start Test Environment
        run: |
          docker compose up -d
          echo "‚è≥ Waiting for containers to start..."
          sleep 15

      - name: Test Container Health
        run: |
          echo "üîç Testing container health endpoints..."

          # Test health endpoints
          if curl -f --max-time 10 http://localhost:11888/health; then
            echo "‚úÖ Container 1 health check passed"
          else
            echo "‚ùå Container 1 health check failed"
            exit 1
          fi

          if curl -f --max-time 10 http://localhost:11889/health; then
            echo "‚úÖ Container 2 health check passed"
          else
            echo "‚ùå Container 2 health check failed"
            exit 1
          fi

      - name: Test Application Pages
        run: |
          echo "üîç Testing application pages..."

          # Test main pages
          if curl -f --max-time 10 http://localhost:11888/; then
            echo "‚úÖ Container 1 main page accessible"
          else
            echo "‚ùå Container 1 main page failed"
            exit 1
          fi

          if curl -f --max-time 10 http://localhost:11889/; then
            echo "‚úÖ Container 2 main page accessible"
          else
            echo "‚ùå Container 2 main page failed"
            exit 1
          fi

      - name: Check Container Logs
        run: |
          echo "üîç Checking container logs for errors..."

          # Check for critical errors in logs
          ERROR_LOGS=$(docker compose logs games-web-1 games-web-2 2>/dev/null | grep -i error || true)
          if [ -n "$ERROR_LOGS" ]; then
            echo "‚ö†Ô∏è  Found error logs (this may be normal):"
            echo "$ERROR_LOGS"
          else
            echo "‚úÖ No error logs found"
          fi

      - name: Validate Configuration Files
        run: |
          echo "üîç Validating configuration files..."

          # Check if required files exist
          if [ ! -f "docker-compose.yml" ]; then
            echo "‚ùå docker-compose.yml not found"
            exit 1
          fi

          if [ ! -f "Dockerfile" ]; then
            echo "‚ùå Dockerfile not found"
            exit 1
          fi

          if [ ! -f "env.example" ]; then
            echo "‚ùå env.example not found"
            exit 1
          fi

          echo "‚úÖ All required files present"

      - name: Clean Up Test Environment
        if: always()
        run: |
          echo "üßπ Cleaning up test environment..."
          docker compose down -v || true
          docker system prune -f || true
          echo "‚úÖ Cleanup completed"

  validate:
    runs-on: ubuntu-latest
    name: üîç Validate Configuration
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Environment Configuration
        run: |
          echo "üîç Validating environment configuration..."

          # Validate env.example format
          if grep -q "^[A-Z_][A-Z0-9_]*=" env.example; then
            echo "‚úÖ Environment variables format is valid"
          else
            echo "‚ö†Ô∏è  Warning: Environment variables may have formatting issues"
          fi

          # Check for required environment variables
          REQUIRED_VARS=("DOMAIN" "CONTENT_DIR_1" "CONTENT_DIR_2")
          for var in "${REQUIRED_VARS[@]}"; do
            if grep -q "^${var}=" env.example; then
              echo "‚úÖ $var is defined in env.example"
            else
              echo "‚ùå $var is missing from env.example"
              exit 1
            fi
          done

      - name: Check Documentation
        run: |
          echo "üîç Checking documentation completeness..."

          DOC_FILES=("README.md" "ARCHITECTURE.md" "TESTING.md")
          for doc in "${DOC_FILES[@]}"; do
            if [ -f "$doc" ]; then
              echo "‚úÖ $doc exists"
            else
              echo "‚ö†Ô∏è  Warning: $doc not found"
            fi
          done

      - name: Lint Docker Compose
        run: |
          echo "üîç Linting Docker Compose configuration..."

          # Check for common issues
          if grep -q "build:" docker-compose.yml && [ ! -f "Dockerfile" ]; then
            echo "‚ùå Dockerfile referenced but not found"
            exit 1
          fi

          # Check for exposed ports
          if grep -q "ports:" docker-compose.yml; then
            echo "‚úÖ Port configuration found"
          else
            echo "‚ö†Ô∏è  Warning: No ports exposed"
          fi

  notify:
    runs-on: ubuntu-latest
    name: üì¢ Notify (Optional)
    needs: [test, validate]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Notify Success
        if: needs.test.result == 'success' && needs.validate.result == 'success'
        run: |
          echo "üéâ CI/CD Pipeline completed successfully!"
          echo "‚úÖ All tests passed"
          echo "‚úÖ Configuration validation completed"
          echo ""
          echo "üìã Next steps:"
          echo "1. Review the changes in this commit"
          echo "2. Deploy to your target environment"
          echo "3. Run health checks: ./scripts/health-check.sh"

      - name: Notify Failure
        if: failure()
        run: |
          echo "‚ùå CI/CD Pipeline failed!"
          echo "üîç Check the job logs above for details"
          echo ""
          echo "üìã Common solutions:"
          echo "1. Review error messages in the logs"
          echo "2. Fix any failing tests"
          echo "3. Ensure all required files are present"
          echo "4. Check Docker configuration"
